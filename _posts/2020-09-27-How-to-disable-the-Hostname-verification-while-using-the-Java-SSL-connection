---
published: true
---
when we open an SSL connection in Java the default implementation of the SSL protocol performs below validations to ensure the requested host is not fake:
1.It performs the ssl handshake.
2.During the handshake it validates if the server certificate is available in the JVMs truststore(by default cacerts is the JVM truststore).
3.once the valid certificate is found in the JVM truststore during the handshake. The validation of the Hostname verification takes place based on the "**CN**" and "**SAN**" entries available in the Server certificate.


For Example if the server certificate is having the below as the "Subject Alternate Name(SAN)" entries:
	SubjectAlternativeName [
     DNSName: inchVM.domain.com
     DNSName: inkumarVM.domain.com
     IPAddress: 127.0.0.1
     ]
And if we try to open the connection for the "https://11.22.33.44:1234/" (where the IP address matches one of the DNS names available in the certificate)using the below code:
	java.net.URL.openConnection(“https://….”))

The SSL handshake process failes with the below error:
	Caused by: java.security.cert.CertificateException: No subject alternative names matching IP address 		11.22.33.44 found
       		at sun.security.util.HostnameChecker.matchIP(HostnameChecker.java:168)
       		at sun.security.util.HostnameChecker.match(HostnameChecker.java:94)
       		at sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:455)
       		at sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:436)
       		at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:200)

     
 To overcome the above error while performing the SSL handshake we can follow the one of the below approach:
1.re-generate the server certificates with all the valid DSN names and the associated IP address as well.
2.Or we need to over write the "verify" function and the set the "HostnamVerifier" to use the new function.

Below is the example code for overwriting the  default "verify" function:
	HostnameVerifier allHostsValid = new HostnameVerifier() {
    	        public boolean verify(String hostname, SSLSession session) {
        	     //user logic for validating the Hostanames  
            	  return true;
            	}
        	};
	HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid)

With the above code we can disable the HostName Verification and make sure that it validates for all the Hostnames and IP address. Else we can write the other logics for validating the Hostname(the default logic works based on the SAN and CN entries available in the certificate)
